CREATE OR REPLACE PROCEDURE ACCOUNT_LASTEST_TXN()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE ACC_LATEST_TXNS AS
SELECT LAST_BALANCE.*, balance 
from transactions t join 
(SELECT ACCOUNT_ID, YEAR(DATE) as txn_year, MONTH(DATE) as txn_month,
MAX(DATE) as latest_date
FROM TRANSACTIONS
GROUP BY 1,2,3
ORDER BY 1,2,3) AS LAST_BALANCE ON LAST_BALANCE.account_id = t.account_id and t.date=LAST_BALANCE.latest_date
WHERE type = 'Credit' --ASSUMING THAT THE LAST TRANSACTION FOR EVERY ACCOUNT WAS CREDIT
order by account_id, txn_year, txn_month;
$$;

CREATE OR REPLACE PROCEDURE BANKING_KPI_PROC()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE BANKING_KPI AS

SELECT  YEAR(t.DATE) AS TXN_YEAR, MONTH(t.DATE) AS TXN_MONTH,t.BANK, a.ACCOUNT_TYPE, 
COUNT(DISTINCT alb.ACCOUNT_ID) AS TOT_ACC, COUNT(DISTINCT t.TRANS_ID) AS TOT_TXN,

SUM(alb.BALANCE) as tot_bal, 
ROUND(NVL(tot_bal/TOT_ACC,0),2) AS AVG_BAL, 
ROUND(AVG_BAL* 0.046735,2) AS AVG_BAL_USD,
ROUND(AVG_BAL * 3.836706,2) AS AVG_BAL_INR,
SUM(CASE WHEN t.TYPE = 'Withdrawal' THEN 1 ELSE 0 END) AS WITHDRAWAL_COUNT,
ROUND((WITHDRAWAL_COUNT/COUNT(t.TYPE))*100,2) AS WITHDRAWAL_PERC,
SUM(CASE WHEN t.TYPE = 'Credit' THEN 1 ELSE 0 END) AS Credit_COUNT,
ROUND((Credit_COUNT/COUNT(t.TYPE))*100,2) as credit_perc

FROM TRANSACTIONS t
INNER JOIN  ACC_LATEST_TXNS AS alb ON T.ACCOUNT_ID = alb.ACCOUNT_ID
LEFT OUTER JOIN  ACCOUNT AS A ON T.ACCOUNT_ID = A.ACCOUNT_ID
GROUP BY 1,2,3,4
ORDER BY 1,2,3;
$$;

SHOW PROCEDURES;